{"ast":null,"code":"import { create } from 'zustand';\nimport api from '../config/api';\nconst useAuthStore = create(set => ({\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  login: async (email, password) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await api.post('/api/auth/login', {\n        email,\n        password\n      });\n      localStorage.setItem('token', response.data.token);\n      const userResponse = await api.get('/api/auth/me');\n      set({\n        user: userResponse.data,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        error: 'Invalid credentials',\n        isLoading: false\n      });\n    }\n  },\n  loginWithGoogle: async credential => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await api.post('/api/auth/google', {\n        credential\n      });\n      localStorage.setItem('token', response.data.token);\n      const userResponse = await api.get('/api/auth/me');\n      set({\n        user: userResponse.data,\n        isAuthenticated: true,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        error: 'Google authentication failed',\n        isLoading: false\n      });\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    set({\n      user: null,\n      isAuthenticated: false\n    });\n  },\n  register: async (email, password, name) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      await api.post('/api/auth/register', {\n        email,\n        password,\n        name\n      });\n      set({\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        error: 'Registration failed',\n        isLoading: false\n      });\n    }\n  }\n}));\nexport default useAuthStore;","map":{"version":3,"names":["create","api","useAuthStore","set","user","isAuthenticated","isLoading","error","login","email","password","response","post","localStorage","setItem","data","token","userResponse","get","loginWithGoogle","credential","logout","removeItem","register","name"],"sources":["/Users/pankajg09/Local Drive/temp/data_dictionary_system/frontend/src/store/auth.ts"],"sourcesContent":["import { create } from 'zustand';\nimport api from '../config/api';\nimport { AuthResponse } from '../types/api';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  picture?: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  loginWithGoogle: (credential: string) => Promise<void>;\n  logout: () => void;\n  register: (email: string, password: string, name: string) => Promise<void>;\n}\n\nconst useAuthStore = create<AuthState>((set) => ({\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n\n  login: async (email: string, password: string) => {\n    set({ isLoading: true, error: null });\n    try {\n      const response = await api.post<AuthResponse>('/api/auth/login', {\n        email,\n        password,\n      });\n      localStorage.setItem('token', response.data.token);\n      const userResponse = await api.get<User>('/api/auth/me');\n      set({\n        user: userResponse.data,\n        isAuthenticated: true,\n        isLoading: false,\n      });\n    } catch (error) {\n      set({\n        error: 'Invalid credentials',\n        isLoading: false,\n      });\n    }\n  },\n\n  loginWithGoogle: async (credential: string) => {\n    set({ isLoading: true, error: null });\n    try {\n      const response = await api.post<AuthResponse>('/api/auth/google', {\n        credential,\n      });\n      localStorage.setItem('token', response.data.token);\n      const userResponse = await api.get<User>('/api/auth/me');\n      set({\n        user: userResponse.data,\n        isAuthenticated: true,\n        isLoading: false,\n      });\n    } catch (error) {\n      set({\n        error: 'Google authentication failed',\n        isLoading: false,\n      });\n    }\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    set({\n      user: null,\n      isAuthenticated: false,\n    });\n  },\n\n  register: async (email: string, password: string, name: string) => {\n    set({ isLoading: true, error: null });\n    try {\n      await api.post('/api/auth/register', {\n        email,\n        password,\n        name,\n      });\n      set({ isLoading: false });\n    } catch (error) {\n      set({\n        error: 'Registration failed',\n        isLoading: false,\n      });\n    }\n  },\n}));\n\nexport default useAuthStore; "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,GAAG,MAAM,eAAe;AAqB/B,MAAMC,YAAY,GAAGF,MAAM,CAAaG,GAAG,KAAM;EAC/CC,IAAI,EAAE,IAAI;EACVC,eAAe,EAAE,KAAK;EACtBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EAEXC,KAAK,EAAE,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IAChDP,GAAG,CAAC;MAAEG,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAe,iBAAiB,EAAE;QAC/DH,KAAK;QACLC;MACF,CAAC,CAAC;MACFG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACI,IAAI,CAACC,KAAK,CAAC;MAClD,MAAMC,YAAY,GAAG,MAAMhB,GAAG,CAACiB,GAAG,CAAO,cAAc,CAAC;MACxDf,GAAG,CAAC;QACFC,IAAI,EAAEa,YAAY,CAACF,IAAI;QACvBV,eAAe,EAAE,IAAI;QACrBC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,GAAG,CAAC;QACFI,KAAK,EAAE,qBAAqB;QAC5BD,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;EACF,CAAC;EAEDa,eAAe,EAAE,MAAOC,UAAkB,IAAK;IAC7CjB,GAAG,CAAC;MAAEG,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAe,kBAAkB,EAAE;QAChEQ;MACF,CAAC,CAAC;MACFP,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACI,IAAI,CAACC,KAAK,CAAC;MAClD,MAAMC,YAAY,GAAG,MAAMhB,GAAG,CAACiB,GAAG,CAAO,cAAc,CAAC;MACxDf,GAAG,CAAC;QACFC,IAAI,EAAEa,YAAY,CAACF,IAAI;QACvBV,eAAe,EAAE,IAAI;QACrBC,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,GAAG,CAAC;QACFI,KAAK,EAAE,8BAA8B;QACrCD,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;EACF,CAAC;EAEDe,MAAM,EAAEA,CAAA,KAAM;IACZR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCnB,GAAG,CAAC;MACFC,IAAI,EAAE,IAAI;MACVC,eAAe,EAAE;IACnB,CAAC,CAAC;EACJ,CAAC;EAEDkB,QAAQ,EAAE,MAAAA,CAAOd,KAAa,EAAEC,QAAgB,EAAEc,IAAY,KAAK;IACjErB,GAAG,CAAC;MAAEG,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC,IAAI;MACF,MAAMN,GAAG,CAACW,IAAI,CAAC,oBAAoB,EAAE;QACnCH,KAAK;QACLC,QAAQ;QACRc;MACF,CAAC,CAAC;MACFrB,GAAG,CAAC;QAAEG,SAAS,EAAE;MAAM,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,GAAG,CAAC;QACFI,KAAK,EAAE,qBAAqB;QAC5BD,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC,CAAC;AAEH,eAAeJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}